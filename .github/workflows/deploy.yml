
name: Build and Deploy Expense Tracker (EC2 Docker)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_PASSWORD }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU (optional)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets. DOCKERHUB_PASSWORD}}
      - name: Build & push backend image
        working-directory: ./app-backend
        run: |
          IMAGE_BACKEND=${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-backend:latest
          docker build -t $IMAGE_BACKEND .
          docker push $IMAGE_BACKEND
          echo "BACKEND_IMAGE=$IMAGE_BACKEND" >> $GITHUB_ENV
      - name: Build & push frontend image
        working-directory: ./app-frontend
        run: |
          IMAGE_FRONTEND=${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-frontend:latest
          docker build -t $IMAGE_FRONTEND .
          docker push $IMAGE_FRONTEND
          echo "FRONTEND_IMAGE=$IMAGE_FRONTEND" >> $GITHUB_ENV
      - name: Prepare production files
        run: |
          cp docker-compose.production.yml docker-compose.yml 
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
          echo "BACKEND_IMAGE=expense-tracker-backend" >> .env
          echo "FRONTEND_IMAGE=expense-tracker-frontend" >> .env
          echo "MYSQL_ROOT_PASSWORD=rootpassword" >> .env
          echo "MYSQL_DATABASE=expensetracker" >> .env
          echo "MYSQL_USER=et_user" >> .env
          echo "MYSQL_PASSWORD=et_pass" >> .env
          echo "JWT_SECRET=supersecretkey" >> .env
      - name: Copy to EC2
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,.env"
          target: "~/deploy/"
      - name: Run docker-compose on EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            mkdir -p ~/deploy
            cd ~/deploy
            docker --version || (echo "docker not found" && exit 1)
            docker-compose pull || true
            docker-compose up -d --remove-orphans
